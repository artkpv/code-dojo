#region begin cut
/*
// PROBLEM STATEMENT
// Rabbits often feel lonely, so one group of rabbits decided to get together 
and hold a beauty contest to determine who among them has the most beautiful ears. 
The rules are as follows. 
Each rabbit submits one vote. 
If a rabbit votes for himself/herself, that vote is considered invalid and thrown away. 
In the end, the rabbit who receives the most valid votes is the winner. 

You are given a string[] names and a string[] votes. 
The i-th rabbit is named names[i], and he/she voted for the rabbit named votes[i]. 
All rabbits have distinct names. 
Return the name of the rabbit who received the most valid votes. 
If there is a tie for most votes, return an empty string instead. 



DEFINITION
Class:RabbitVoting
Method:getWinner
Parameters:string[], string[]
Returns:string
Method signature:string getWinner(string[] names, string[] votes)


NOTES
-Rabbit names are case-sensitive. See example 4 for clarification.


CONSTRAINTS
-names will contain between 2 and 50 elements, inclusive. 
-Each element of names will contain between 1 and 50 characters, inclusive. 
-Each character in names will be a letter ('A'-'Z', 'a'-'z').
-All elements of names will be distinct. 
-votes will contain the same number of elements as names. 
-Each element of votes will be the same as one of the elements of names. 


EXAMPLES

0)
{ "Alice", "Bill", "Carol", "Dick" }
{ "Bill", "Dick", "Alice", "Alice" }

Returns: "Alice"

2 votes for Alice, 1 for Bill, 0 for Carol, and 1 for Dick. Alice got the most. 


1)
{ "Alice", "Bill", "Carol", "Dick" }
{ "Carol", "Carol", "Bill", "Bill" }

Returns: ""

Bill and Carol are tied with 2 votes each.

2)
{ "Alice", "Bill", "Carol", "Dick" }
{ "Alice", "Alice", "Bill", "Bill" }

Returns: "Bill"

Alice's vote for herself is invalid. 1 valid vote for Alice, 2 for Bill.

3)
{ "Alice", "Bill" }
{ "Alice", "Bill" }

Returns: ""

All votes are invalid. 


4)
{ "WhiteRabbit", "whiterabbit", "whiteRabbit", "Whiterabbit" }
{ "whiteRabbit", "whiteRabbit", "whiteRabbit", "WhiteRabbit" }

Returns: "whiteRabbit"

These four are different names. 


*/
#endregion end cut
using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;

public class RabbitVoting {
    public string getWinner(string[] names, string[] votes) {
        string res;
        return res;
    }

#region begin cut
    public static void Main(String[] args) {
        try  {
            eq(0,(new RabbitVoting()).getWinner(new string[] { "Alice", "Bill", "Carol", "Dick" }, new string[] { "Bill", "Dick", "Alice", "Alice" }),"Alice");
            eq(1,(new RabbitVoting()).getWinner(new string[] { "Alice", "Bill", "Carol", "Dick" }, new string[] { "Carol", "Carol", "Bill", "Bill" }),"");
            eq(2,(new RabbitVoting()).getWinner(new string[] { "Alice", "Bill", "Carol", "Dick" }, new string[] { "Alice", "Alice", "Bill", "Bill" }),"Bill");
            eq(3,(new RabbitVoting()).getWinner(new string[] { "Alice", "Bill" }, new string[] { "Alice", "Bill" }),"");
            eq(4,(new RabbitVoting()).getWinner(new string[] { "WhiteRabbit", "whiterabbit", "whiteRabbit", "Whiterabbit" }, new string[] { "whiteRabbit", "whiteRabbit", "whiteRabbit", "WhiteRabbit" }),"whiteRabbit");
        } 
        catch( Exception exx)  {
            System.Console.WriteLine(exx);
            System.Console.WriteLine( exx.StackTrace);
        }
Console.Read();
    }
    private static void eq( int n, object have, object need) {
        if( eq( have, need ) ) {
            Console.WriteLine( "Case "+n+" passed." );
        } else {
            Console.Write( "Case "+n+" failed: expected " );
            print( need );
            Console.Write( ", received " );
            print( have );
            Console.WriteLine();
        }
    }
    private static void eq( int n, Array have, Array need) {
        if( have == null || have.Length != need.Length ) {
            Console.WriteLine("Case "+n+" failed: returned "+have.Length+" elements; expected "+need.Length+" elements.");
            print( have );
            print( need );
            return;
        }
        for( int i= 0; i < have.Length; i++ ) {
            if( ! eq( have.GetValue(i), need.GetValue(i) ) ) {
                Console.WriteLine( "Case "+n+" failed. Expected and returned array differ in position "+i );
                print( have );
                print( need );
                return;
            }
        }
        Console.WriteLine("Case "+n+" passed.");
    }
    private static bool eq( object a, object b ) {
        if ( a is double && b is double ) {
            return Math.Abs((double)a-(double)b) < 1E-9;
        } else {
            return a!=null && b!=null && a.Equals(b);
        }
    }
    private static void print( object a ) {
        if ( a is string ) {
            Console.Write("\"{0}\"", a);
        } else if ( a is long ) {
            Console.Write("{0}L", a);
        } else {
            Console.Write(a);
        }
    }
    private static void print( Array a ) {
        if ( a == null) {
            Console.WriteLine("<NULL>");
        }
        Console.Write('{');
        for ( int i= 0; i < a.Length; i++ ) {
            print( a.GetValue(i) );
            if( i != a.Length-1 ) {
                Console.Write(", ");
            }
        }
        Console.WriteLine( '}' );
    }
#endregion end cut
}
