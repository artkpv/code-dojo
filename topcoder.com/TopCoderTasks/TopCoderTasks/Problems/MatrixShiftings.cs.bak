#region begin cut
/*
// PROBLEM STATEMENT
// Manao has an N x M matrix filled with digits. The rows in the matrix are consecutively numbered from 0 to N-1 starting from the top row and the columns are numbered from 0 to M-1 starting from the left column. He wants to perform several matrix shift operations in order to obtain a matrix with value in the upper left corner.

There are four types of matrix shifts: left, right, top and bottom. Performing the left shift on the matrix, we shift each of its columns one position to the left and put the first column in place of the last one. Similarly, right shift results in shifting each column to the right and placing the last one in place of the first. Top shift takes each row one position up and puts the first row in place of the last, and bottom shift shifts all the rows one position down and puts the last row in place of the first row. Note that if a matrix has only one row, then top and bottom shifts do not change the matrix in any way. Similarly, if a matrix has a single column, then right and left shifts have no effect.



You are given a string[] matrix, where the j-th character of the i-th element is the digit in row i, column j. Compute and return the minimum possible total number of shifts that Manao should perform to accomplish his task. If there is no way to obtain a matrix with the upper left element equal to value, return -1 instead.


DEFINITION
Class:MatrixShiftings
Method:minimumShifts
Parameters:string[], int
Returns:int
Method signature:int minimumShifts(string[] matrix, int value)


CONSTRAINTS
-matrix will contain between 1 and 50 elements, inclusive.
-Each element of matrix will contain between 1 and 50 characters, inclusive.
-All elements of matrix will have the same length.
-matrix will contain digits ('0'-'9') only.
-value will be between 0 and 9, inclusive.


EXAMPLES

0)
{"136",
 "427",
 "568",
 "309"}
2

Returns: 2

The matrix contains a single entry with value 2. It can be taken to the upper left corner by performing a single top shift and a single left shift.

1)
{"0000",
 "0000",
 "0099"}
9

Returns: 2

If we perform a right shift and a bottom shift, the 9 in the lower right corner will appear in the upper left corner as needed. 

2)
{"0123456789"}
7

Returns: 3

Three right shifts will do the trick.

3)
{"555",
 "555"}
1

Returns: -1

There are no ones in the given matrix, so no shifts can help.

4)
{"12417727123",
 "65125691886",
 "55524912622",
 "12261288888"}
9

Returns: 6



*/
#endregion end cut
using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;

public class MatrixShiftings {
    public int minimumShifts(string[] matrix, int value) {
        int res;
        return res;
    }

#region begin cut
    public static void Main(String[] args) {
        try  {
            eq(0,(new MatrixShiftings()).minimumShifts(new string[] {"136",
                "427",
                "568",
                "309"}, 2),2);
            eq(1,(new MatrixShiftings()).minimumShifts(new string[] {"0000",
                "0000",
                "0099"}, 9),2);
            eq(2,(new MatrixShiftings()).minimumShifts(new string[] {"0123456789"}, 7),3);
            eq(3,(new MatrixShiftings()).minimumShifts(new string[] {"555",
                "555"}, 1),-1);
            eq(4,(new MatrixShiftings()).minimumShifts(new string[] {"12417727123",
                "65125691886",
                "55524912622",
                "12261288888"}, 9),6);
        } 
        catch( Exception exx)  {
            System.Console.WriteLine(exx);
            System.Console.WriteLine( exx.StackTrace);
        }
Console.Read();
    }
    private static void eq( int n, object have, object need) {
        if( eq( have, need ) ) {
            Console.WriteLine( "Case "+n+" passed." );
        } else {
            Console.Write( "Case "+n+" failed: expected " );
            print( need );
            Console.Write( ", received " );
            print( have );
            Console.WriteLine();
        }
    }
    private static void eq( int n, Array have, Array need) {
        if( have == null || have.Length != need.Length ) {
            Console.WriteLine("Case "+n+" failed: returned "+have.Length+" elements; expected "+need.Length+" elements.");
            print( have );
            print( need );
            return;
        }
        for( int i= 0; i < have.Length; i++ ) {
            if( ! eq( have.GetValue(i), need.GetValue(i) ) ) {
                Console.WriteLine( "Case "+n+" failed. Expected and returned array differ in position "+i );
                print( have );
                print( need );
                return;
            }
        }
        Console.WriteLine("Case "+n+" passed.");
    }
    private static bool eq( object a, object b ) {
        if ( a is double && b is double ) {
            return Math.Abs((double)a-(double)b) < 1E-9;
        } else {
            return a!=null && b!=null && a.Equals(b);
        }
    }
    private static void print( object a ) {
        if ( a is string ) {
            Console.Write("\"{0}\"", a);
        } else if ( a is long ) {
            Console.Write("{0}L", a);
        } else {
            Console.Write(a);
        }
    }
    private static void print( Array a ) {
        if ( a == null) {
            Console.WriteLine("<NULL>");
        }
        Console.Write('{');
        for ( int i= 0; i < a.Length; i++ ) {
            print( a.GetValue(i) );
            if( i != a.Length-1 ) {
                Console.Write(", ");
            }
        }
        Console.WriteLine( '}' );
    }
#endregion end cut
}
