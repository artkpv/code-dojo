using System;
using System.Text;
class BinaryCode{

	#region Testing code generated by KawigiEdit
	[STAThread]
	public static void Main(string[] args)
	{
		string[] answer, desiredAnswer;
		bool errors = false;
		bool same;
		DateTime time;
		
		time = DateTime.Now;
		answer = new BinaryCode().decode("123210122");
		Console.WriteLine("Time: " + (DateTime.Now-time).TotalSeconds + " seconds");
		desiredAnswer = new string[]{ "011100011",  "NONE" };
		Console.WriteLine("Your answer:");
		if (answer.Length > 0)
		{
			Console.Write("\t{ \"" + answer[0] + "\"");
			for (int i=1; i<answer.Length; i++)
				Console.Write(",\n\t  \"" + answer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		Console.WriteLine("Desired answer:");
		if (desiredAnswer.Length > 0)
		{
			Console.Write("\t{ \"" + desiredAnswer[0] + "\"");
			for (int i=1; i<desiredAnswer.Length; i++)
				Console.Write(",\n\t  \"" + desiredAnswer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		same = (desiredAnswer.Length == answer.Length);
		for (int i=0; i<answer.Length && same; i++)
			if (answer[i] != desiredAnswer[i])
				same = false;
		if (!same)
		{
			errors = true;
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else
			Console.WriteLine("Match :-)");
		Console.WriteLine();
		time = DateTime.Now;
		answer = new BinaryCode().decode("11");
		Console.WriteLine("Time: " + (DateTime.Now-time).TotalSeconds + " seconds");
		desiredAnswer = new string[]{ "01",  "10" };
		Console.WriteLine("Your answer:");
		if (answer.Length > 0)
		{
			Console.Write("\t{ \"" + answer[0] + "\"");
			for (int i=1; i<answer.Length; i++)
				Console.Write(",\n\t  \"" + answer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		Console.WriteLine("Desired answer:");
		if (desiredAnswer.Length > 0)
		{
			Console.Write("\t{ \"" + desiredAnswer[0] + "\"");
			for (int i=1; i<desiredAnswer.Length; i++)
				Console.Write(",\n\t  \"" + desiredAnswer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		same = (desiredAnswer.Length == answer.Length);
		for (int i=0; i<answer.Length && same; i++)
			if (answer[i] != desiredAnswer[i])
				same = false;
		if (!same)
		{
			errors = true;
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else
			Console.WriteLine("Match :-)");
		Console.WriteLine();
		time = DateTime.Now;
		answer = new BinaryCode().decode("22111");
		Console.WriteLine("Time: " + (DateTime.Now-time).TotalSeconds + " seconds");
		desiredAnswer = new string[]{ "NONE",  "11001" };
		Console.WriteLine("Your answer:");
		if (answer.Length > 0)
		{
			Console.Write("\t{ \"" + answer[0] + "\"");
			for (int i=1; i<answer.Length; i++)
				Console.Write(",\n\t  \"" + answer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		Console.WriteLine("Desired answer:");
		if (desiredAnswer.Length > 0)
		{
			Console.Write("\t{ \"" + desiredAnswer[0] + "\"");
			for (int i=1; i<desiredAnswer.Length; i++)
				Console.Write(",\n\t  \"" + desiredAnswer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		same = (desiredAnswer.Length == answer.Length);
		for (int i=0; i<answer.Length && same; i++)
			if (answer[i] != desiredAnswer[i])
				same = false;
		if (!same)
		{
			errors = true;
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else
			Console.WriteLine("Match :-)");
		Console.WriteLine();
		time = DateTime.Now;
		answer = new BinaryCode().decode("123210120");
		Console.WriteLine("Time: " + (DateTime.Now-time).TotalSeconds + " seconds");
		desiredAnswer = new string[]{ "NONE",  "NONE" };
		Console.WriteLine("Your answer:");
		if (answer.Length > 0)
		{
			Console.Write("\t{ \"" + answer[0] + "\"");
			for (int i=1; i<answer.Length; i++)
				Console.Write(",\n\t  \"" + answer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		Console.WriteLine("Desired answer:");
		if (desiredAnswer.Length > 0)
		{
			Console.Write("\t{ \"" + desiredAnswer[0] + "\"");
			for (int i=1; i<desiredAnswer.Length; i++)
				Console.Write(",\n\t  \"" + desiredAnswer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		same = (desiredAnswer.Length == answer.Length);
		for (int i=0; i<answer.Length && same; i++)
			if (answer[i] != desiredAnswer[i])
				same = false;
		if (!same)
		{
			errors = true;
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else
			Console.WriteLine("Match :-)");
		Console.WriteLine();
		time = DateTime.Now;
		answer = new BinaryCode().decode("3");
		Console.WriteLine("Time: " + (DateTime.Now-time).TotalSeconds + " seconds");
		desiredAnswer = new string[]{ "NONE",  "NONE" };
		Console.WriteLine("Your answer:");
		if (answer.Length > 0)
		{
			Console.Write("\t{ \"" + answer[0] + "\"");
			for (int i=1; i<answer.Length; i++)
				Console.Write(",\n\t  \"" + answer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		Console.WriteLine("Desired answer:");
		if (desiredAnswer.Length > 0)
		{
			Console.Write("\t{ \"" + desiredAnswer[0] + "\"");
			for (int i=1; i<desiredAnswer.Length; i++)
				Console.Write(",\n\t  \"" + desiredAnswer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		same = (desiredAnswer.Length == answer.Length);
		for (int i=0; i<answer.Length && same; i++)
			if (answer[i] != desiredAnswer[i])
				same = false;
		if (!same)
		{
			errors = true;
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else
			Console.WriteLine("Match :-)");
		Console.WriteLine();
		time = DateTime.Now;
		answer = new BinaryCode().decode("12221112222221112221111111112221111");
		Console.WriteLine("Time: " + (DateTime.Now-time).TotalSeconds + " seconds");
		desiredAnswer = new string[]{ "01101001101101001101001001001101001",  "10110010110110010110010010010110010" };
		Console.WriteLine("Your answer:");
		if (answer.Length > 0)
		{
			Console.Write("\t{ \"" + answer[0] + "\"");
			for (int i=1; i<answer.Length; i++)
				Console.Write(",\n\t  \"" + answer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		Console.WriteLine("Desired answer:");
		if (desiredAnswer.Length > 0)
		{
			Console.Write("\t{ \"" + desiredAnswer[0] + "\"");
			for (int i=1; i<desiredAnswer.Length; i++)
				Console.Write(",\n\t  \"" + desiredAnswer[i] + "\"");
			Console.WriteLine(" }");
		}
		else
			Console.WriteLine("\t{ }");
		same = (desiredAnswer.Length == answer.Length);
		for (int i=0; i<answer.Length && same; i++)
			if (answer[i] != desiredAnswer[i])
				same = false;
		if (!same)
		{
			errors = true;
			Console.WriteLine("DOESN'T MATCH!!!!");
		}
		else
			Console.WriteLine("Match :-)");
		Console.WriteLine();
		
		
		if (errors)
			Console.WriteLine("Some of the test cases had errors :-(");
		else
			Console.WriteLine("You're a stud (at least on the test data)! :-D ");
	}
	#endregion

	public string[] decode(string message){
		string[] decoded = new string[2];
		decoded[0] = Decode(message, 0);
		decoded[1] = Decode(message, 1);
		return decoded;
	}
	
	public string Decode(string message, int firstDigit){
		if(string.IsNullOrEmpty(message))
			return "NONE";
			
		string returnValue = null;
		int encDigit; 
		if(message.Length == 1) {
			encDigit = int.Parse(message[0].ToString());
			if(encDigit == 1 || encDigit == 0)
				returnValue = encDigit.ToString();
		}
		else {
			StringBuilder sb = new StringBuilder();
			int[] decodedDigits = new int[message.Length];
			for(int i=0; i < message.Length; i++){ 
				encDigit = int.Parse(message[i].ToString());
				if(i==0){
					decodedDigits[i] = firstDigit;
					decodedDigits[i+1] = encDigit - firstDigit;
				}
				else if(i==message.Length-1){
					if(decodedDigits[i] != encDigit - decodedDigits[i-1]){
						sb = null;
						break;
					}
				}
				else {
					decodedDigits[i+1] = encDigit - decodedDigits[i-1] - decodedDigits[i];
				}
				
				if(decodedDigits[i] != 1 && decodedDigits[i] != 0){
					sb = null;
					break;
				}
					
				sb.Append(decodedDigits[i].ToString());
			}
			if(sb != null)
				returnValue = sb.ToString();
		}
		
		return returnValue ?? "NONE";
	}
}
