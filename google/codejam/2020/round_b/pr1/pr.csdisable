#define TRACE
#define DEBUG
/*
Author: Artyom K. <www.artkpv.net>

 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Diagnostics;
using static System.Math;

namespace CFround_bpr1
{
    public class Solver
    {
        int[] dirs = new[] {0,1, 1,0, 0,-1, -1,0};
        public void Solve()
        {
            int tests = ReadInt();
            for (int test = 0; test < tests; test++)
            {
                int x = ReadInt();
                int y = ReadInt();
                int md = Abs(x) + Abs(y);
                if (md % 2 == 0)
                {
                    Write($"Case #{test+1}: IMPOSSIBLE");
                    continue;
                }
                var edgeto = new Dictionary<Tuple<int, int>, Tuple<int, int>>();
                var q = new Queue<Tuple<int, int, int>>();
                var source = Tuple.Create(0, 0, 0);
                q.Enqueue(source);
                edgeto[Tuple.Create(0, 0)] = Tuple.Create(0, 0);
                int count = 0;
                Tuple<int, int> target = Tuple.Create(x, y);
                while (!edgeto.ContainsKey(target) && count <= (int)1e4)
                {
                    var t = q.Dequeue();
                    //Write(t);
                    var tSht = Tuple.Create(t.Item1, t.Item2);
                    for(int dInx = 0; dInx < dirs.Length; dInx += 2)
                    {
                        var tt = Tuple.Create(
                            t.Item1 + dirs[dInx] * (1 << t.Item3),
                            t.Item2 + dirs[dInx+1] * (1 << t.Item3));
                        if (edgeto.ContainsKey(tt))
                            continue;
                        edgeto[tt] = tSht;
                        q.Enqueue(Tuple.Create(tt.Item1, tt.Item2, t.Item3 + 1));
                    }
                    count += 1;
                }

                if (!edgeto.ContainsKey(target))
                {
                    Write($"Case #{test+1}: IMPOSSIBLE");
                }
                else
                {
                    var sb = new StringBuilder();
                    var t = target;
                    while (edgeto[t] != t)
                    {
                        char d;
                        var tt = edgeto[t];
                        if (tt.Item1 - t.Item1 > 0)
                            d = 'W';
                        else if (tt.Item1 - t.Item1 < 0)
                            d = 'E';
                        else if (tt.Item2 - t.Item2 > 0)
                            d = 'S';
                        else if (tt.Item2 - t.Item2 < 0)
                            d = 'N';
                        else 
                            break;
                        sb.Append(d);
                        t = edgeto[t];
                    }

                    Write($"Case #{test+1}: {new String(sb.ToString().Reverse().ToArray())}");
                }
            }
        }

        #region Main

        protected static TextReader reader;
        protected static TextWriter writer;
        static void Main()
        {
            Debug.Listeners.Clear();
            Debug.Listeners.Add(new ConsoleTraceListener());
            Trace.Listeners.Clear();
            Trace.Listeners.Add(new ConsoleTraceListener());

            reader = new StreamReader(Console.OpenStandardInput());
            writer = new StreamWriter(Console.OpenStandardOutput());
            new Solver().Solve();
            reader.Close();
            writer.Close();
        }

        #endregion

        #region Read / Write
        private static Queue<string> currentLineTokens = new Queue<string>();
        private static string[] ReadAndSplitLine() { return reader.ReadLine()?.Split(new[] { ' ', '\t', }, StringSplitOptions.RemoveEmptyEntries); }
        public static string ReadToken() { while (currentLineTokens.Count == 0)currentLineTokens = new Queue<string>(ReadAndSplitLine() ?? new[] {""}); return currentLineTokens.Dequeue(); }
        public static int ReadInt() { return int.Parse(ReadToken()); }
        public static long ReadLong() { return long.Parse(ReadToken()); }
        public static double ReadDouble() { return double.Parse(ReadToken(), CultureInfo.InvariantCulture); }
        public static int[] ReadIntArray() { return ReadAndSplitLine().Select(int.Parse).ToArray(); }
        public static long[] ReadLongArray() { return ReadAndSplitLine().Select(long.Parse).ToArray(); }
        public static double[] ReadDoubleArray() { return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray(); }
        public static int[][] ReadIntMatrix(int numberOfRows) { int[][] matrix = new int[numberOfRows][]; for (int i = 0; i < numberOfRows; i++)matrix[i] = ReadIntArray(); return matrix; }
        public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)
        {
            int[][] matrix = ReadIntMatrix(numberOfRows); int[][] ret = new int[matrix[0].Length][];
            for (int i = 0; i < ret.Length; i++) { ret[i] = new int[numberOfRows]; for (int j = 0; j < numberOfRows; j++)ret[i][j] = matrix[j][i]; } return ret;
        }
        public static string[] ReadLines(int quantity) { string[] lines = new string[quantity]; for (int i = 0; i < quantity; i++)lines[i] = reader.ReadLine().Trim(); return lines; }
        public static void WriteArray<T>(IEnumerable<T> array) { writer.WriteLine(string.Join(" ", array)); }
        public static void Write(params object[] array) { WriteArray(array); }
        public static void WriteLines<T>(IEnumerable<T> array) { foreach (var a in array)writer.WriteLine(a); }
        private class SDictionary<TKey, TValue> : Dictionary<TKey, TValue>
        {
            public new TValue this[TKey key]
            {
                get { return ContainsKey(key) ? base[key] : default(TValue); }
                set { base[key] = value; }
            }
        }
        private static T[] Init<T>(int size) where T : new() { var ret = new T[size]; for (int i = 0; i < size; i++)ret[i] = new T(); return ret; }
        #endregion
    }
}
