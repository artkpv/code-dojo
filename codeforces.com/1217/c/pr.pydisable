#!/bin/python3
"""
0110
2 + 1 + 1 + 0 = 4

0101
2 + 1 + 0 + 0 = 3
1
1
101


00001000
1 + 1 + 0 + 1 + .. + 1 (8)  = 4

0001000
3

01010101010
5 + 5 + 0 + 0 + 4



I 1 BF
count
1 1
10 2
011 3
0100 4
00101 5
000110 6
0000111 7
..
n (n-1)*2 (n-2)*3  (n-3)*4  .. (n-k)*(k+1)  , k=0..n-1
n + 2*n + 3*n + 4*n .. (k+1)*n - 2 - 6 - 12 - 20 - .. - 2*k-1
~= n*n*n + n*n  ~= n^3

T: O(N^3)
S: 1


I 2

"""
MAXN = 18
MAX = 2**MAXN-1
def f_old(x, xlen, l, r):
    n = r - l + 1
    res = (x >> (xlen-r-1)) & (MAX >> (MAXN - n))
    # print(x, l, r, x>>(xlen-r-1), MAX>>(MAXN-n), res)
    return res

def f(x, l, r):
    return int(x[l:r+1], base=2)


for _ in range(int(input().strip())):
    s = input().strip()
    # sint = int(s, base=2)
    n = len(s)
    nxt = [-1]
    for i in range(n):
        nxt += [i] if s[i] == '1' else [nxt[-1]]

    count = 0
    for r in range(n-1, -1, -1):
        l = nxt[r+1]
        while l > -1 and r - l + 1 <= MAXN:
            f_lr = f(s, l, r)
            if f_lr <= r - nxt[l]:
                count += 1
            # print(l, r, f_lr, count)
            l = nxt[l]
    print(count)



