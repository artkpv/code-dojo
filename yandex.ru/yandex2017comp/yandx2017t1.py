"""
NEXT:
    - merge sort counts those or note? Looks like it does not.

Младший разработчик Сергей работает в Яндексе всего несколько месяцев, однако у него уже накопилось целых nn выполненных задач. Для управления задачами в Яндексе используется собственная система управления задачами (так называемый трекер задач), задачи в трекере Сергея пронумерованы числами от 1 до nn.
Как часто случается с разработчиками, Сергей всё время забывает закрывать выполненные задачи. Близится конец испытательного срока и он решил, наконец, это сделать. Исходно все nn задач в трекере Сергея открыты. Задачи в трекере отсортированы сверху вниз по времени последнего изменения, но Сергей хочет закрывать задачи именно по порядку от 11 до nn.
Сергей поступает следующим образом. Он просматривает список задач сверху вниз, закрывая некоторые задачи. После того, как Сергей доходит до конца списка, он опять начнет просматривать задачи сверху вниз.
Помогите Сергею определить сколько раз ему будет необходимо просматривать список задач с начала до того момента, когда все nn задач окажутся закрыты. Закрыть задачу можно ровно один раз.
Формат ввода

В первой строке входных данных записано одно целое число nn ( 1≤n≤2000001≤n≤200000) — количество задач, которые выполнил Сергей.
Во второй строке записан порядок задач в трекере.
Формат вывода

Выведите одно число — количество просмотров Сергеем списка задач до момента закрытия всех задач в системе.

"""
n = int(input().strip())
a = [int(i) for i in input().strip().split(' ')]

swaps = 0
def msort3(x):
    global swaps
    result = []
    if len(x) < 2:
        return x
    mid = int(len(x) / 2)
    y = msort3(x[:mid])
    z = msort3(x[mid:])
    i = 0
    j = 0
    while i < len(y) and j < len(z):
        if y[i] > z[j]:
            swaps += 1
            result.append(z[j])
            j += 1
        else:
            result.append(y[i])
            i += 1
    print('msort3.. y=', y, ' z=', z, ' swap=', swaps)
    """
    3 2
    i = 0, j = 0
    r = [2], j = 1, i = 0
    """
    print(' i=', i, ' j=', j, ' swaps=', swaps)
    swaps += max(len(y) - i - j, 0)
    result += y[i:]
    result += z[j:]
    return result

msort3(a)
print(swaps)
